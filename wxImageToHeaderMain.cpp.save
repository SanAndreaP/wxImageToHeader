/***************************************************************
 * Name:      wxImageToHeaderMain.cpp
 * Purpose:   Code for Application Frame
 * Author:    SanAndreasP ()
 * Created:   2014-06-23
 * Copyright: SanAndreasP ()
 * License:
 **************************************************************/

#include "wxImageToHeaderMain.h"
#include <wx/msgdlg.h>
#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <wx/textdlg.h>

//(*InternalHeaders(wxImageToHeaderFrame)
#include <wx/settings.h>
#include <wx/font.h>
#include <wx/intl.h>
#include <wx/string.h>
//*)

//helper functions
enum wxbuildinfoformat {
    short_f, long_f };

wxString wxbuildinfo(wxbuildinfoformat format)
{
    wxString wxbuild(wxVERSION_STRING);

    if (format == long_f )
    {
#if defined(__WXMSW__)
        wxbuild << _T("-Windows");
#elif defined(__UNIX__)
        wxbuild << _T("-Linux");
#endif

#if wxUSE_UNICODE
        wxbuild << _T("-Unicode build");
#else
        wxbuild << _T("-ANSI build");
#endif // wxUSE_UNICODE
    }

    return wxbuild;
}

//(*IdInit(wxImageToHeaderFrame)
const long wxImageToHeaderFrame::ID_CHECKBOX1 = wxNewId();
const long wxImageToHeaderFrame::ID_CHECKBOX2 = wxNewId();
const long wxImageToHeaderFrame::ID_STATICBOX1 = wxNewId();
const long wxImageToHeaderFrame::ID_LISTBOX1 = wxNewId();
const long wxImageToHeaderFrame::ID_BUTTON2 = wxNewId();
const long wxImageToHeaderFrame::ID_BUTTON1 = wxNewId();
const long wxImageToHeaderFrame::ID_TEXTCTRL1 = wxNewId();
const long wxImageToHeaderFrame::ID_BUTTON3 = wxNewId();
const long wxImageToHeaderFrame::ID_STATICBOX2 = wxNewId();
const long wxImageToHeaderFrame::ID_CHECKBOX3 = wxNewId();
const long wxImageToHeaderFrame::ID_TEXTCTRL2 = wxNewId();
const long wxImageToHeaderFrame::ID_BUTTON4 = wxNewId();
const long wxImageToHeaderFrame::ID_STATICTEXT1 = wxNewId();
const long wxImageToHeaderFrame::ID_TEXTCTRL3 = wxNewId();
const long wxImageToHeaderFrame::ID_PANEL1 = wxNewId();
//*)

BEGIN_EVENT_TABLE(wxImageToHeaderFrame,wxFrame)
    //(*EventTable(wxImageToHeaderFrame)
    //*)
END_EVENT_TABLE()

wxImageToHeaderFrame::wxImageToHeaderFrame(wxWindow* parent,wxWindowID id)
{
    //(*Initialize(wxImageToHeaderFrame)
    Create(parent, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE|wxMINIMIZE_BOX, _T("wxID_ANY"));
    SetClientSize(wxSize(992,401));
    Panel1 = new wxPanel(this, ID_PANEL1, wxPoint(216,264), wxSize(992,401), wxTAB_TRAVERSAL, _T("ID_PANEL1"));
    CB_WithAlpha = new wxCheckBox(Panel1, ID_CHECKBOX1, _("with alpha channel"), wxPoint(320,72), wxDefaultSize, 0, wxDefaultValidator, _T("ID_CHECKBOX1"));
    CB_WithAlpha->SetValue(false);
    CB_FileOut = new wxCheckBox(Panel1, ID_CHECKBOX2, _("output to file:"), wxPoint(320,96), wxDefaultSize, 0, wxDefaultValidator, _T("ID_CHECKBOX2"));
    CB_FileOut->SetValue(false);
    StaticBox1 = new wxStaticBox(Panel1, ID_STATICBOX1, _("Selected Images"), wxPoint(16,16), wxSize(288,376), 0, _T("ID_STATICBOX1"));
    LB_Images = new wxListBox(Panel1, ID_LISTBOX1, wxPoint(24,40), wxSize(272,312), 0, 0, 0, wxDefaultValidator, _T("ID_LISTBOX1"));
    Btn_RemoveFile = new wxButton(Panel1, ID_BUTTON2, _("-"), wxPoint(160,360), wxSize(24,24), 0, wxDefaultValidator, _T("ID_BUTTON2"));
    Btn_AddFile = new wxButton(Panel1, ID_BUTTON1, _("+"), wxPoint(136,360), wxSize(24,24), 0, wxDefaultValidator, _T("ID_BUTTON1"));
    TC_FileOut = new wxTextCtrl(Panel1, ID_TEXTCTRL1, wxEmptyString, wxPoint(336,112), wxSize(168,24), 0, wxDefaultValidator, _T("ID_TEXTCTRL1"));
    TC_FileOut->Disable();
    Btn_FileOut = new wxButton(Panel1, ID_BUTTON3, _("Choose..."), wxPoint(504,112), wxSize(75,24), 0, wxDefaultValidator, _T("ID_BUTTON3"));
    Btn_FileOut->Disable();
    StaticBox2 = new wxStaticBox(Panel1, ID_STATICBOX2, _("Output"), wxPoint(600,16), wxSize(384,376), 0, _T("ID_STATICBOX2"));
    CB_Compress = new wxCheckBox(Panel1, ID_CHECKBOX3, _("Compress Bytes with EasyComp™"), wxPoint(320,144), wxDefaultSize, 0, wxDefaultValidator, _T("ID_CHECKBOX3"));
    CB_Compress->SetValue(false);
    CB_Compress->Disable();
    TC_Namesp = new wxTextCtrl(Panel1, ID_TEXTCTRL2, wxEmptyString, wxPoint(320,40), wxSize(256,21), 0, wxDefaultValidator, _T("ID_TEXTCTRL2"));
    Button1 = new wxButton(Panel1, ID_BUTTON4, _("Convert"), wxPoint(320,216), wxSize(256,32), 0, wxDefaultValidator, _T("ID_BUTTON4"));
    StaticText1 = new wxStaticText(Panel1, ID_STATICTEXT1, _("Namespace name"), wxPoint(320,24), wxDefaultSize, 0, _T("ID_STATICTEXT1"));
    TC_Output = new wxTextCtrl(Panel1, ID_TEXTCTRL3, wxEmptyString, wxPoint(608,40), wxSize(368,344), wxTE_MULTILINE|wxTE_READONLY|wxTE_RICH|wxTE_RICH2|wxTE_DONTWRAP, wxDefaultValidator, _T("ID_TEXTCTRL3"));
    wxFont TC_OutputFont = wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT);
    if ( !TC_OutputFont.Ok() ) TC_OutputFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    TC_Output->SetFont(TC_OutputFont);
    FD_ImageFiles = new wxFileDialog(this, _("Select file"), wxEmptyString, wxEmptyString, _("Portable Network Graphics (*.png)|*.png"), wxFD_DEFAULT_STYLE|wxFD_OPEN|wxFD_FILE_MUST_EXIST|wxFD_MULTIPLE, wxDefaultPosition, wxDefaultSize, _T("wxFileDialog"));

    Connect(ID_CHECKBOX2,wxEVT_COMMAND_CHECKBOX_CLICKED,(wxObjectEventFunction)&wxImageToHeaderFrame::OnCB_FileOutClick);
    Connect(ID_BUTTON1,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&wxImageToHeaderFrame::OnBtn_AddFileClick);
    Connect(ID_BUTTON4,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&wxImageToHeaderFrame::OnButton1Click);
    //*)
}

wxImageToHeaderFrame::~wxImageToHeaderFrame()
{
    //(*Destroy(wxImageToHeaderFrame)
    //*)
}

void wxImageToHeaderFrame::OnQuit(wxCommandEvent& event)
{
    Close();
}

bool wxImageToHeaderFrame::checkValidHeaderName()
{
    return !boost::trim_copy(this->TC_Namesp->GetValue().ToStdString()).empty();
}

void wxImageToHeaderFrame::OnBtn_AddFileClick(wxCommandEvent& event)
{
    if( this->FD_ImageFiles->ShowModal() == wxID_OK ) {
        wxArrayString files;
        this->FD_ImageFiles->GetPaths(files);
        for( wxString file : files ) {
            std::string msg = std::string("enter a name for ") + boost::filesystem::path(file.ToStdString()).filename().generic_string();
            wxTextEntryDialog *TED_ImageVarName = new wxTextEntryDialog(this, msg, _("Please enter a variable name"), wxEmptyString,
                                                                        wxOK|wxCANCEL|wxCENTRE|wxWS_EX_VALIDATE_RECURSIVELY, wxDefaultPosition);
            if( TED_ImageVarName->ShowModal() == wxID_OK ) {
                this->m_images.push_back(std::pair<std::string, std::string>(TED_ImageVarName->GetValue().ToStdString(), file.ToStdString()));
                this->LB_Images->AppendAndEnsureVisible(TED_ImageVarName->GetValue());
            }

            delete TED_ImageVarName;
            TED_ImageVarName = NULL;
        }
    }
}

void wxImageToHeaderFrame::OnButton1Click(wxCommandEvent& event)
{
    bool shouldConvert = true;
    if( this->m_images.empty() ) {
        this->LB_Images->SetBackgroundColour(wxColour(255,192,192));
        shouldConvert = false;
    } else {
        this->LB_Images->SetBackgroundColour(wxNullColour);
    }
    this->LB_Images->Refresh();

    if( !this->checkValidHeaderName() ) {
        this->TC_Namesp->SetBackgroundColour(wxColour(255,192,192));
        shouldConvert = false;
    } else {
        this->TC_Namesp->SetBackgroundColour(wxNullColour);
    }
    this->TC_Namesp->Refresh();

    if( shouldConvert ) {
        std::string headerName = this->TC_Namesp->GetValue().ToStdString();
        std::vector<std::pair<std::string, std::string>> convBytes;
        std::stringstream str;
        bool hasAlpha = this->CB_WithAlpha->GetValue();
        int initWidth = 0;
        int initHeight = 0;

        for( std::pair<std::string, std::string> elem : this->m_images ) {
            wxImage img(elem.second);

            hasAlpha = hasAlpha && img.HasAlpha();

            if( initWidth == 0 || initHeight == 0 ) {
                initWidth = img.GetWidth();
                initHeight = img.GetHeight();
            }

            unsigned long imgArea = img.GetWidth()*img.GetHeight();
            unsigned char *imgData = img.GetData();
            for( unsigned long i = 0; i < imgArea*3L; i++ ) {
                str << "\\x" << std::hex << (unsigned int)imgData[i];
            }
            str << std::dec;
            convBytes.push_back(std::pair<std::string, std::string>(elem.first + "_D", str.str()));
            str.str(std::string());

            if( hasAlpha ) {
                unsigned char *imgAlpha = img.GetAlpha();
                for( unsigned long i = 0; i < imgArea; i++ ) {
                    str << "\\x" << std::hex << (unsigned int)imgAlpha[i];
                }
                convBytes.push_back(std::pair<std::string, std::string>(elem.first + "_A", str.str()));
                str << std::dec;
                str.str(std::string());
            }
        }
        str << "#ifndef " << boost::to_upper_copy(headerName) << "_IMG" << std::endl
            << "#define " << boost::to_upper_copy(headerName) << "_IMG" << std::endl
            << std::endl
            << "#include <wx/image.h>" << std::endl
            << std::endl
            << "namespace " << headerName << " {" << std::endl
            << "    int width = " << initWidth << ";" << std::endl
            << "    int height = " << initHeight << ";" << std::endl
            << std::endl;

        for( std::pair<std::string, std::string> elem : convBytes ) {
            str << "    const char *" << elem.first << " = \"" << elem.second << "\";" << std::endl;
        }
        str << std::endl;
        for( std::pair<std::string, std::string> elem : this->m_images ) {
            str << "    wxImage get" << boost::to_upper_copy(elem.first.substr(0, 1)) << elem.first.substr(1) << "() {" << std::endl
                << "        wxImage ret(width, height, const_cast<unsigned char*>(reinterpret_cast<const unsigned char*>(" << elem.first + "_D" << ")), true);" << std::endl;
            if( hasAlpha ) {
                str << "        ret.InitAlpha();" << std::endl
                    << "        ret.SetAlpha(const_cast<unsigned char*>(reinterpret_cast<const unsigned char*>(" << elem.first + "_D" << ")), true);" << std::endl;
            }
            str << "        return ret;" << std::endl
                << "    }" << std::endl
                << std::endl;
        }

        str << "}" << std::endl
            << std::endl
            << "#endif // " << boost::to_upper_copy(headerName) << "_IMG" << std::endl;

        this->TC_Output->SetValue(str.str());
    }
}

void wxImageToHeaderFrame::OnCB_FileOutClick(wxCommandEvent& event)
{
    if( this->CB_FileOut.GetValue() ) {
        this->TC_FileOut->Enable();
        this->Btn_FileOut->Enab
    }
}
